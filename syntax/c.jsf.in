# JOE syntax highlight file for C

# A (deterministic) state machine which performs lexical analysis of C.
# (This is the "assembly language" of syntax highlighting.  A separate
# program could be used to convert a regular expression NFA syntax into this
# format).

# Each state begins with ':<name> <color-name>'
# <color-name> is the color used for characters eaten by the state
# (really a symbol for a user definable color).

# The first state defined is the initial state.

# Within a state, define transitions (jumps) to other states.  Each
# jump has the form: <character-list> <target-state> [<option>s]

# There are two ways to specify <character-list>s, either * for any
# character not otherwise specified, or a literal list of characters within
# quotes (ranges and escape sequences allows).  When the next character
# matches any in the list, a jump to the target-state is taken and the
# character is eaten (we advance to the next character of the file to be
# colored).
#
# The * transition should be the first transition specified in the state.
#
# There are several options:
#   noeat     	do not eat the character, instead feed it to the next state
#             	(this tends to make the states smaller, but be careful: you
#		can make infinite loops).
#
#   recolor=-N	Recolor the past N characters with the color of the
#		target-state.  For example once /* is recognized as the
#		start of C comment, you want to color the /* with the C
#		comment color.
#
#   buffer    	start copying characters to a buffer, beginning with this
#		one (it's ok, to not terminate buffering with a matching
#		'strings' option- the buffer is limited to leading 19
#		characters).
#
#   strings	A list of strings follows.  If the buffer matches any of the
#		given strings, a jump to the target-state in the string list
#		is taken instead of the normal jump.
#
#   istrings	Same as strings, but case is ignored.
#
#   The format of the string list is:
#
#      "string"   <target-state>
#      "string"   <target-state>
#      done
#
# Weirdness: only states have colors, not transitions.  This means that you
# sometimes have to make dummy states with '* next-state noeat' just to get
# a color specification.


# Define no. sync lines
# You can say:
# -200     means 200 lines
# -        means always start parsing from beginning of file when we lose sync
#          if nothing is specified, the default is -50

# Define colors
#
# bold inverse blink dim underline
# white cyan magenta blue yellow green red black
# bg_white bg_cyan bg_magenta bg_blue bg_yellow bg_green bg_red bg_black

=Idle
=Preproc 	blue
=Define		bold blue
=Comment 	green
=Constant 	cyan
=Escape 	bold cyan
=Type 		bold
=Keyword 	bold

:reset Idle
	*		first		noeat
	" \t"		reset

:first Idle
	*		idle		noeat
	"#"		pre		recolor=-1

:pre Preproc
	*		preproc		noeat
	" \t"		pre
	"a-z"		preident	recolor=-1 buffer

:preident Preproc
	*		preproc		noeat strings
	"define"	predefine
done
	"a-z"		preident

:predefine Preproc
	*		predefine
	" \t"		predef_ws
	"\n"		reset

:predef_ws Preproc
	*		idle		noeat
	" \t"		predef_ws
	"a-zA-Z0-9_"	predef_ident	recolor=-1

:predef_ident Define
	*		idle		noeat recolor=-1
	"a-zA-Z0-9_"	predef_ident

:preproc Preproc
	*		preproc
	"\n"		reset
	"\\"		preproc_cont

:preproc_cont Preproc
	*		preproc_cont
	"\n"		preproc
	

# All following states are for when we're not in a preprocessor line

:idle Idle
	*		idle
	"\n"		reset
	"/"		slash
	"0-9"		first_digit	recolor=-1
	"."		maybe_float
	"\""		string		recolor=-1
	"'"		char		recolor=-1
	"a-zA-Z_"	ident		buffer

:slash Idle
	*		idle		noeat
	"*"		comment		recolor=-2
	"/"		line_comment	recolor=-2

:comment Comment
	*		comment
	"*"		maybe_end_comment

:maybe_end_comment Comment
	*		comment
	"/"		idle
	"*"		maybe_end_comment

:line_comment Comment
	*		line_comment
	"\n"		reset

:first_digit Constant
	*		idle	noeat	recolor=-1
	"xX"		hex
	"."		float
	"0-9"		first_number

:hex Constant
	*		idle	noeat	recolor=-1
	"0-9A-Fa-f"	hex

:first_number Constant
	*		idle	noeat	recolor=-1
	"0-9"		first_number
	"."		float

:maybe_float Constant
	*		idle	recolor=-2	noeat
	"0-9"		float		recolor=-2

:float Constant
	*		idle	noeat	recolor=-1
	"eE"		epart
	"0-9"		float

:epart Constant
	*		idle	noeat	recolor=-1
	"0-9+\-"	enum

:enum Constant
	*		idle	noeat	recolor=-1
	"0-9"		enum

:string	Constant
	*		string
	"\""		idle
	"\\"		string_escape	recolor=-1
	"%"		string_control	recolor=-1

:string_escape Escape
	*		string
	"\n"		string		recolor=-2

:string_control Escape
	*		string_control
	"\n"		reset
	"diouxXeEfFgGaAcspn%SC"	string

:char Constant
	*		char
	"\n"		reset
	"'"		idle
	"\\"		char_escape	recolor=-1

:char_escape	Escape
	*		char
	"\n"		char		recolor=-2

:ident Idle
	*		idle		noeat strings
	"int"		type
	"float"		type
	"long"		type
	"short"		type
	"char"		type
	"double"	type
	"signed"	type
	"unsigned"	type
	"void"		type
	"static"	type
	"register"	type
	"extern"	type
	"inline"	type
	"auto"		type
	"const"		type
	"volatile"	type
	"if"		kw
	"else"		kw
	"while"		kw
	"for"		kw
	"break"		kw
	"continue"	kw
	"do"		kw
	"case"		kw
	"default"	kw
	"switch"	kw
	"goto"		kw
	"struct"	kw
	"enum"		kw
	"return"	kw
	"sizeof"	kw
	"typedef"	kw
	"union"		kw
done
	"a-zA-Z0-9_"	ident

:type Type
	*	idle	noeat

:kw Keyword
	*	idle	noeat
